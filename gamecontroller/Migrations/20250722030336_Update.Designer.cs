// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gamecontroller;

#nullable disable

namespace gamecontroller.Migrations
{
    [DbContext(typeof(TelemetryContext))]
    [Migration("20250722030336_Update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("gamecontroller.TelemetryEvent", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsError")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatchGUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TelemetryMatchLogsMatchGUID")
                        .HasColumnType("TEXT");

                    b.HasKey("Timestamp");

                    b.HasIndex("TelemetryMatchLogsMatchGUID");

                    b.ToTable("TelemetryEvent");
                });

            modelBuilder.Entity("gamecontroller.TelemetryMatchLogs", b =>
                {
                    b.Property<string>("MatchGUID")
                        .HasColumnType("TEXT");

                    b.HasKey("MatchGUID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("gamecontroller.TelemetrySnapshot", b =>
                {
                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<float>("EffectiveTickrate")
                        .HasColumnType("REAL");

                    b.Property<string>("MatchGUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemoryUsageMB")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayersConnected")
                        .HasColumnType("INTEGER");

                    b.PrimitiveCollection<string>("ReplicationFNames")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("TargetTickrate")
                        .HasColumnType("REAL");

                    b.Property<string>("TelemetryMatchLogsMatchGUID")
                        .HasColumnType("TEXT");

                    b.HasKey("Timestamp");

                    b.HasIndex("TelemetryMatchLogsMatchGUID");

                    b.ToTable("TelemetrySnapshot");
                });

            modelBuilder.Entity("gamecontroller.TelemetryEvent", b =>
                {
                    b.HasOne("gamecontroller.TelemetryMatchLogs", null)
                        .WithMany("TelemetryEvents")
                        .HasForeignKey("TelemetryMatchLogsMatchGUID");
                });

            modelBuilder.Entity("gamecontroller.TelemetrySnapshot", b =>
                {
                    b.HasOne("gamecontroller.TelemetryMatchLogs", null)
                        .WithMany("TelemetrySnapshots")
                        .HasForeignKey("TelemetryMatchLogsMatchGUID");
                });

            modelBuilder.Entity("gamecontroller.TelemetryMatchLogs", b =>
                {
                    b.Navigation("TelemetryEvents");

                    b.Navigation("TelemetrySnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
